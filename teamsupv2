#!/bin/bash
# github.com/jpda
# teams updater for apple silicon macs
# today, while universal binaries exist for teams, the teams installer actually contains two packages:
#  - the teams app itself
#  - the MSTeamsAudioDriver - I think it's related to playing music/hi-fi audio in teams, not sure tho
# `MSTeamsAudioDriver.pkg` is still x64, so the main teams installer will ask to install rosetta
#
# to get around this, we unpack the installer pkg,
# look for the Teams.app package (`Teams_osx_app.pkg`, at least for now), and
# expand the Payload, which is `Microsoft Teams.app`.
# once expanded, it's copied into `/Applications` after killing any running teams processes
# lastly it cleans up the tmp dir it uses as scratch space
#
# usage:
# - no arguments downloads latest public teams installer package from microsoft
# - or pass in the name of an already-acquired teams_osx.pkg
# - or use `--prerel` to download the prerelease installer package
# prerel sourced from github/@ItzLevvie (https://github.com/ItzLevvie/MicrosoftTeams-msinternal)
#   e.g.,
#   `teamsup ~/Downloads/Teams_osx.pkg`
#   `teamsup --prerel`
#   `teamsup --prerel ring2`
#
# not supported, no warranties, use at your own risk, tip your server, etc

# see: https://stackoverflow.com/a/24067243
function version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }

# see: https://stackoverflow.com/a/33597663
# set verbose level to info
__VERBOSE=6
LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug")
function .log() {
  local LEVEL=${1}
  shift
  if [ ${__VERBOSE} -ge ${LEVEL} ]; then
    echo "[${LOG_LEVELS[$LEVEL]}][$(date -jIseconds)]" "$@"
  fi
}

WORK=/tmp/teamsupv2
TEAMS_PKG_PATH=$WORK/Teams_osx.pkg
TEAMS_PAYLOAD_DIR=$WORK/teamspkg
FILE_TYPE=''
PREREL_RING='ring2'
PREREL=false
APP_NAME="Microsoft Teams (work or school)"
APP_FILE_NAME="${APP_NAME}.app"
APP_PATH="/Applications/${APP_NAME}.app"
APP_PKG_NAME="MicrosoftTeams_app.pkg"
TEAMS_PKG_APP_ROOT=${TEAMS_PAYLOAD_DIR}/${APP_PKG_NAME}/Payload/${APP_FILE_NAME}
OLD_VER="0.0.0.0"
OLD_VER="$(/usr/libexec/PlistBuddy "${APP_PATH}/Contents/Info.plist" -c 'print CFBundleVersion')"
FORCE_INSTALL=false
DOWNLOAD_ONLY=false
CLEANUP=true

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
  -p | --prerel)
    PREREL_RING="$2"
    PREREL=true
    shift # past argument
    shift # past value
    ;;
  -f | --force)
    FORCE_INSTALL="$2"
    shift # past argument
    shift # past value
    ;;
  -d | --download-only)
    DOWNLOAD_ONLY=true
    shift # past argument
    ;;
  --dirty)
    CLEANUP=false
    shift # past argument
    ;;
  -* | --*)
    echo "Unknown option $1"
    exit 1
    ;;
  *)
    POSITIONAL_ARGS+=("$1") # save positional arg
    shift                   # past argument
    ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

function stopTeams() {
  # stop teams, but exclude this grep command from the PID kill list
  # since we're searching for the pattern, this command will also appear, so the second grep is to ignore grep
  # i feel like there's prob a better way to do this, but a bash wizard I am not
  .log 6 "Stopping Teams"
  ps -fe | grep "${APP_PATH}/Contents/MacOS/${APP_NAME}" | grep -wv "grep" | awk '{print $2}' | xargs kill
}

function getTeams() {
  # this is the public download url for teams mac - it will redirect a few times, but this links should always
  # get the latest teams installer that is publicly released
  # using progress-bar here because of the redirects it gets sort of messy
  .log 6 "downloading release teams installer"
  curl -L "https://go.microsoft.com/fwlink/p/?LinkID=869428" -o $TEAMS_PKG_PATH --progress-bar
}

function getTeamsPrerel() {
  # this uses the pre-release download urls from here: https://github.com/ItzLevvie/MicrosoftTeams-msinternal
  # if you aren't entitled to these, or don't know what they are, probably shouldn't use them
  # https://config.teams.microsoft.com/config/v1/MicrosoftTeams/1415_1.0.0.0?environment=prod&audienceGroup=ring2&teamsRing=ring2&agent=TeamsBuilds
  # the ring-URL logic here is too simple and doesn't work for some rings because other parts of the url are different
  BUILD_INFO=$(curl -s "https://config.teams.microsoft.com/config/v1/MicrosoftTeams/1415_1.0.0.0?environment=prod&audienceGroup=$PREREL_RING&teamsRing=$PREREL_RING&agent=TeamsBuilds" | jq -r .BuildSettings.WebView2.macOS)
  TEAMS_VER=$(echo $BUILD_INFO | jq -r .latestVersion)
  BUILD_LINK=$(echo $BUILD_INFO | jq -r .buildLink)
  .log 6 "Currently installed version is $OLD_VER; latest $PREREL_RING is $TEAMS_VER; Force install is $FORCE_INSTALL"
  if version_gt $TEAMS_VER $OLD_VER || $FORCE_INSTALL; then
    # DOWNLOAD_URL="https://staticsint.teams.cdn.office.net/production-osx/$TEAMS_VER/Teams_osx.pkg"
    DOWNLOAD_URL=$BUILD_LINK
    if [ $PREREL_RING=="ring0" ]; then
      DOWNLOAD_URL=${BUILD_LINK//statics./staticsint.}
    fi
    .log 6 "Downloading prerelease teams installer for $TEAMS_VER from $DOWNLOAD_URL"
    curl $DOWNLOAD_URL -o $TEAMS_PKG_PATH --progress-bar
  elif [ $OLD_VER==$TEAMS_VER ]; then
    .log 6 "Installed version ($OLD_VER) is the same as $PREREL_RING version ($TEAMS_VER), skipping"
    exit 1
  else
    .log 6 "Installed version ($OLD_VER) is newer than $PREREL_RING version ($TEAMS_VER), skipping"
    exit 1
  fi
}

function updateTeams() {
  .log 6 "Expanding package, looking for Teams_osx_app.pkg"
  pkgutil --expand-full $TEAMS_PKG_PATH $TEAMS_PAYLOAD_DIR #>> $WORK/pkgutil.log
  OLD_VERSION_FILE="${APP_PATH}/Contents/Info.plist"
  if [[ -f "${OLD_VERSION_FILE}" ]]; then
    .log 6 "Found existing Teams app at ${APP_PATH}, checking version"
    OLD_VER=$(/usr/libexec/PlistBuddy "${OLD_VERSION_FILE}" -c "print CFBundleVersion")
  else
    .log 6 "No existing Teams app found, installing"
  fi
  .log 6 "Current installed version: $OLD_VER"

  NEW_VERSION_FILE="${TEAMS_PKG_APP_ROOT}/Contents/Info.plist"
  .log 6 "Looking for $NEW_VERSION_FILE"
  if [[ -f "${NEW_VERSION_FILE}" ]]; then
    .log 6 "found plist for new version"
    NEW_VER=$(/usr/libexec/PlistBuddy "${NEW_VERSION_FILE}" -c "print CFBundleVersion")
  else
    .log 6 "hmm"
  fi
  .log 6 "New version: $NEW_VER; Override: $FORCE_INSTALL"
  if version_gt $OLD_VER $NEW_VER && $FORCE_INSTALL; then
    .log 4 "No update available, installed $OLD_VER is newer than $NEW_VER"
    return 0
  fi

  .log 6 "Upgrading $OLD_VER --> $NEW_VER"
  # .log 6 $WORK/$APP_PKG_NAME
  FILE_TYPE=$(file "$(find "${TEAMS_PKG_APP_ROOT}/Contents/MacOS/" -maxdepth 1 -type f)")
  if [[ $FILE_TYPE == *"arm64"* ]]; then
    .log 6 "This is an arm64 binary, moving to Applications."
    stopTeams
    /bin/mv "/Applications/${APP_FILE_NAME}" /Applications/TeamsOld.app
    /bin/cp -Rf "${TEAMS_PKG_APP_ROOT}" /Applications/
    /bin/rm -rf /Applications/TeamsOld.app
  else
    .log 1 "\e[1;31m This is not an arm64 binary, teams will not be replaced. If you really want this, copy it manually."
  fi
}

function cleanup() {
  .log 6 "Removing schmutz"
  rm -rf $WORK
}

# setup working directories

echo "=== teams updater go! $(date) ==="
.log 6 "Setting up working directory $WORK; default package path $TEAMS_PKG_PATH"
mkdir -p $WORK
cd $WORK

# get teams

if [ "$PREREL" = true ]; then
  getTeamsPrerel
else
  getTeams
fi

if [ "$DOWNLOAD_ONLY" = true ]; then
  exit 0
fi

updateTeams

if [ "$CLEANUP" = true ]; then
  cleanup
fi

# if [ "$1" == '' ]; then
#   getTeams
# elif [ "$1" == '--prerel' ]; then
#   if [ "$2" == '' ]; then
#     .log 6 "No version specified, using default ($PREREL_RING)"
#   else
#     PREREL_RING=$2
#   fi
#   if [ "$3" == '--download-only' ]; then
#     getTeamsPrerel
#   else
#     updateTeams
#     cleanup
#   fi
#   getTeamsPrerel
# else # you provided a package path
#   .log 6 "setting path to $1"
#   TEAMS_PKG_PATH="$1"
# fi

.log 6 "Finished"
sleep 0.5
open "/Applications/${APP_FILE_NAME}"
